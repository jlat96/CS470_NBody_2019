FILES:  

       SOURCE CODE: 		pnb.f90
       SAMPLE INPUT DATA: 	pnb_032.dat  
       SAMPLE OUTPUT DATA: 	particle0001

IMPORTANT:

       Be sure paths are set so that the 'mpi.h' file included in
       pnb.f90 can be found during compilation.

TO COMPILE (with aggressive optimization):

       mpif90 -O3 -o pnb.x pnb.f90

TO RUN with 4 processors:

       mpirun -np 4 ./pnb.x < pnb_032.dat > pnb_032.out &

INPUT DATA DESCRIPTION

  LINE 1: 32 3 /number of bodies (n); number of bodies output (nout) 
  LINE 2: 28   /maximum Maclaurin polynomial order (mo) 
  LINE 3: 0.E+0,  0.5D0, -.025  /time interval [a,b] and print interval (dtout)
  LINE 4: -1.0E-14, .F.  /global error tolerance; diagnostics trigger 
  body    mass     x1        x2         x3       v1         v2       v3
  BODY 1: 1.000000 -0.451781 -0.668711  2.130823 -0.390649  0.170636 -0.139339
  BODY 2: 1.000000  0.139627  2.417780 -0.184771  0.059581  0.064517  0.278170
  ...
  BODY n: 1.000000  0.030465  0.050829  0.016035 -0.024180 -0.040752  0.048022

OUTPUT DATA DESCRIPTION

  diagnostic data are dumped to standard output file: pnb_032.out
 
  Files particle0001, particle0002, particle0003, etc. contain trajectory data
  for particles 1, 2, 3, etc. The format is:

     time1  positions1  (x1, x2, x3)
            velocities1 (v1, v2, v3)
     time2  positions2  (x1, x2, x3)
            velocities2 (v1, v2, v3)
     etc.

  If the diagnostic trigger is invoked, additional diagnostic data 
  (energy, linear and angular momenta) are output to files:

     energies
     momenta1
     momenta2
     
### Important Notes
This is the team that worked with this code in 2019. As we have never before encountered anytying written in Fortran, it took
us some time to understand what was going on under the hood with this implementation. An important thing to understand in this 
Fortran code is the WRITE statements. In Fortran, there is no print equivalent, everything is treated as a file, including the
terminal - this is what is done under the hood in C and C-like languages too, but Fortran makes it more explicit.

A WRITE statement is consistant of two parts (at minimum), the first tells the statement where to write to. In this
code, numbers are binded to files during an OPEN statement - for example the file sys_summary is binded to the number 7.
Whenever a WRITE statement has a 7 in the first part, it tells the WRITE statement to write to whatever file is binded
to 7. There are a few special numbers that are already pre-binded to specific files, the only one we care about is 6,
which is binded to stdout. The second part of a WRITE statement tells how to format the string, you don't have to mess with
this at all, just use *, which lets the compilier auto-format.

After a WRITE statement, you use however many arguments you want to WRITE. Now that you understand very basic I/O in Fortran,
the following statement should make some sense to you.

OPEN(unit=7, file=hello)
WRITE(6, *) "hello world"
WRITE(7, *) "hello future students"
